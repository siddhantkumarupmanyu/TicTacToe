Game Class: set all the values and creates immutables, have newGame() function/method


Play class: takes in player1, player2, board, renderer
-play asks player for move
    -player takes input from user and returns move
-play checks weather it is a valid move
    -if not, again ask player for move -> recheck ->...
-check if any player has won
    -if so give that info to the renderer
-call renderer for drawing the board

Player1 goes always first in play class. but it a immutable class, therefore when creating new play, game class
can create play class with players interchanged, therefore changing the turn of players


Renderer: have setBoard method for setting current board
-maps given Mark to Display mark(img, string, etc)
-draws the appropriate things (who won, lose, etc) on screen

---------
Can use finite state machine in Play class but right now it only increases the complexity.


Should playerinterfaceInput know about player??? -> It could then display for which player it is asking the move for..??

no need of nextPlayer in display fun in renderer

---------
Additional features

total games played -> game class

how many won etc.. -> player class
